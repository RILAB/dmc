}
}
my.scaf_recRate = allRecRate[[my.chromNumber]]
getRecRate_marker = function(loc) {
my.diffLoc = loc - my.scaf_recRate[ ,1]
testDiffLoc = my.diffLoc < 0
if(sum(testDiffLoc) == 0)
{
markerMax = nrow(my.scaf_recRate)
}
else{
markerMax = which(min(my.scaf_recRate[testDiffLoc , 1]) == my.scaf_recRate[ , 1])
}
if(markerMax ==  1) {
return(my.scaf_recRate[1, 2])
}
else if(markerMax == nrow(my.scaf_recRate)) {
return(my.scaf_recRate[nrow(my.scaf_recRate) , 2])
}
else {
return(mean(my.scaf_recRate[markerMax, 2], my.scaf_recRate[markerMax - 1, 2]))
}
}
recRate_data = sapply(scaf$POS, getRecRate_marker)
recRates = sapply(1: 8, function(i) unlist(allRecRate[[i]][,2]))
numBins_rec = 200
my.seq_rec = seq(min(recRates), max(recRates), length.out = (numBins_rec + 1))
midRecRate = sapply(1 : numBins_rec, function(i) mean(c(my.seq_rec[i], my.seq_rec[i+1])))
binnedRecRate = cut(recRate_data, my.seq_rec)
binnedRecRate_binnedWindow = lapply(1 : length(selSite), function(i) as.numeric(binnedRecRate[(binPosMin[i] : binPosMax[i])]))
head(binnedRecRate_binnedWindow[[1]])
head(my.scaf_recRate)
head(recRate_data[[1]])
head(recRate_data)
head(positions)
head(binnedRecRate)
max(recRates)
plot(binnedRecRate_binnedWindow[[1]])
plot(binnedRecRate_binnedWindow[[2]])
plot(binnedRecRate_binnedWindow[[100]])
head(positions_binned[[100]])
my.scaf_recRate
4515715 - 4657012
3.252860e-08
which(positions == 4515715)
binnedRecRate[65230]
midRecRate[189]
for(i in 1 : length(binnedRecRate_binnedWindow)) {
binnedRecRate_binnedWindow[is.na(binnedRecRate_binnedWindow)] <- numBins_rec
}
rm(list = ls())
setwd("/Users/kristinlee/Documents/lyrata/fixedPops/")
allRecRate = readRDS("/Users/kristinlee/Documents/runDMC_private/lyrata/recombinationMap/allRecRate_list.RDS")
windowOverlap = 0.1
Ne = 70000
rec_mean = 2*10^-8
F_estimate = readRDS("/Users/kristinlee/Documents/lyrata/fixedPops/F_estimate.lyrata_rand.RDS")
inv_FOmegas_coalTime = readRDS("/Users/kristinlee/Documents/lyrata/fixedPops/inv_FOmegas_coalTime_lyrata_SNPcount_fixedPops_wRecBin.RDS")
det_FOmegas_coalTime = readRDS("/Users/kristinlee/Documents/lyrata/fixedPops/det_FOmegas_coalTime_lyrata_SNPcount_fixedPops_wRecBin.RDS")
mean_fii = mean(diag(F_estimate))
s_max = 0.05
binLength = -s_max * log(((0.8)^-1 - 1)*mean_fii / (1 - mean_fii)) / (rec_mean * 2 * log(4 * Ne * s_max))
##MVN parameters
numPops = 4
k = numPops - 1
mu = as.matrix(rep(0, k))
rank = numPops - 1
nSNPs = 8000
##mean centering
M = numPops
Tmatrix = matrix(data = rep(-1 / M, (M - 1) * M), nrow = M - 1, ncol = M)
diag(Tmatrix) = (M - 1) / M
##bin distances
#distances = seq(0, binLength, length.out = 500)
#numBins = 500
#my.seq = seq(min(distances), max(distances), length.out = (numBins + 1))
maxDistance = readRDS("maxDistance_lyrata_wRecBin.RDS")
#midDistances = c(sapply(1:numBins, function(i) mean(c(my.seq[i], my.seq[i+1]))), maxDistance)
my.seq = c(seq(0, binLength/4, length.out = 1000), seq(binLength/4 + (binLength/4)/1000, binLength, length.out = 2000), seq(binLength + (binLength)/2000, maxDistance, length.out = 1000))
midDistances = c(sapply(1 : (length(my.seq) - 1), function(i) mean(c(my.seq[i], my.seq[i+1]))), maxDistance)
tC_withins = c(0, 2, 5, 10, 20, 25, 50, 100, 200, 500, 750, 1000, 1e4, 1e5, 1e8)
tC_betweens = c(0, 2, 5, 10, 20, 100, 200, 500, 750, 1000, 1e4, 1e5, 1e8)
my.chromNumber = 2
my.scaf = paste("scaffold_", my.chromNumber, sep = "")
lyrata_noMissing = readRDS("/Users/kristinlee/Documents/lyrata/lyrata_noMissing.RDS")
#scaf = lyrata_noMissing[lyrata_noMissing$CHROM_bin == my.scaf, ]
scaf = lyrata_noMissing[lyrata_noMissing$CHROM == my.scaf, ]
#pops: GH, CR, L12, LP
#freqs = cbind(scaf$freqGH, scaf$freqCR, scaf$freqL12, scaf$freqLP)
#freqs = t(freqs)
#rand.freqs = apply(freqs, 2, function(my.freqs) {
#if(runif(1)<0.5){my.freqs<-1-my.freqs};my.freqs
#})
#saveRDS(rand.freqs, paste("rand.freqs_", my.scaf, "_SNPcount_fixedPops.RDS", sep = ""))
rand.freqs = readRDS("rand.freqs_scaffold_1_SNPcount_fixedPops.RDS")
freqs = as.matrix(t(rand.freqs))
positions = scaf$POS
selSite = readRDS(paste("selSitebySNPcount_", my.scaf, "_fixedPops_wRecBin.RDS", sep = ""))
el.selSite = sapply(1 : length(selSite), function(i) which.min(abs(positions - selSite[i])))
binPosMax = el.selSite + nSNPs/2
binPosMin = el.selSite - nSNPs/2
for(site in 1 : length(binPosMax)) {
if(binPosMax[site] > length(positions)) {
remain = binPosMax[site] - length(positions)
binPosMin[site] <- binPosMin[site] - remain
binPosMax[site] <- length(positions)
}
if(binPosMin[site] < 1) {
remain = 1 - binPosMin[site]
binPosMax[site] <- remain + binPosMax[site]
binPosMin[site] <- 1
}
}
freqs_binned = lapply(1 : length(selSite), function(i) freqs[(binPosMin[i] : binPosMax[i]), ])
epsilons = lapply(1 : length(freqs_binned), function(i) rowMeans(freqs_binned[[i]]))
include = lapply(1 : length(freqs_binned), function(i) epsilons[[i]] > 0.05 & epsilons[[i]] < 0.95)
freqs_MC = lapply(1 : length(freqs_binned), function(i) sapply(1 : nrow(freqs_binned[[i]]), function(j) Tmatrix %*% freqs_binned[[i]][j,]))
positions_binned = lapply(1 : length(selSite), function(i) positions[binPosMin[i] : binPosMax[i]])
distances_data = lapply(1 : length(positions_binned), function(i) abs(positions_binned[[i]] - selSite[i]))
binnedDist = lapply(distances_data, function(j) as.matrix(as.numeric(cut(j, my.seq))))
#binnedDist = lapply(1: length(dFreqs_rf), function(j) apply(distances_data[[j]], 2, function(i) as.numeric(cut(i, my.seq))))
range(binnedDist)
for(i in 1 : length(binnedDist)) {
my.naTest = which(is.na(binnedDist[[i]]))
if(length(which(is.na(binnedDist[[i]]))) > 0){
if(my.naTest[1] == 1) {
binnedDist[[i]][1] <- 1
my.naTest = my.naTest[-1]
}
binnedDist[[i]][my.naTest] <- length(midDistances)
}
}
my.scaf_recRate = allRecRate[[my.chromNumber]]
getRecRate_marker = function(loc) {
my.diffLoc = loc - my.scaf_recRate[ ,1]
testDiffLoc = my.diffLoc < 0
if(sum(testDiffLoc) == 0)
{
markerMax = nrow(my.scaf_recRate)
}
else{
markerMax = which(min(my.scaf_recRate[testDiffLoc , 1]) == my.scaf_recRate[ , 1])
}
if(markerMax ==  1) {
return(my.scaf_recRate[1, 2])
}
else if(markerMax == nrow(my.scaf_recRate)) {
return(my.scaf_recRate[nrow(my.scaf_recRate) , 2])
}
else {
return(mean(my.scaf_recRate[markerMax, 2], my.scaf_recRate[markerMax - 1, 2]))
}
}
recRate_data = sapply(scaf$POS, getRecRate_marker)
recRates = sapply(1: 8, function(i) unlist(allRecRate[[i]][,2]))
numBins_rec = 200
my.seq_rec = seq(min(recRates), max(recRates), length.out = (numBins_rec + 1))
midRecRate = sapply(1 : numBins_rec, function(i) mean(c(my.seq_rec[i], my.seq_rec[i+1])))
binnedRecRate = cut(recRate_data, my.seq_rec)
binnedRecRate_binnedWindow = lapply(1 : length(selSite), function(i) as.numeric(binnedRecRate[(binPosMin[i] : binPosMax[i])]))
range(binnedRecRate_binnedWindow)
200*4000
100*500
8e+05/50000
knitr::opts_chunk$set(echo = TRUE)
setwd = "~/Users/kristinlee/Documents/dmc/"
numPops = 6
positions = readRDS("/Users/kristinlee/Documents/dmc/selectedRegionPositions_example.RDS")
freqs = readRDS("Users/kristinlee/Documents/dmc/selectedRegionAlleleFreqs_example.RDS")
positions = readRDS("selectedRegionPositions_example.RDS")
getwd()
setwd("~/Users/kristinlee/Documents/dmc/")
setwd("/Users/kristinlee/Documents/dmc/")
positions = readRDS("selectedRegionPositions_example.RDS")
getwd()
ls
list.files()
positions = readRDS("selectedRegionPositions_example.RDS")
getwd()
positions = readRDS("/Users/kristinlee/Documents/dmc/selectedRegionPositions_example.RDS")
freqs = readRDS("/Users/kristinlee/Documents/dmc/selectedRegionAlleleFreqs_example.RDS")
#these values must be same as used to calculate Calculate F^(S) matrices above
numBins = 1000
selSite = seq(min(positions), max(positions), length.out = 10)
sels = c(1e-4, 1e-3, 0.01, 0.05, 0.01, seq(0.05, 0.3, by = 0.05), seq(0.4, 0.6, by = 0.1))
times = c(0, 5, 25, 50, 100, 500, 1000, 1e4, 1e6)
gs = c(1/(2*Ne), 10^-(4:1))
migs = c(10^-(seq(5, 1, by = -2)), 0.5, 1)
selPops = c(1, 3, 5) #only necessary to specify since we define possible source populations as all selected populations
sources = selPops
source("calcCompositeLike.R")
source("/Users/kristinlee/Documents/dmc/calcCompositeLike.R")
source("/Users/kristinlee/Documents/dmc/calcCompositeLike.R")
dim(freqs)
dim(Tmatrix)
numPops
rm(list = ls())
setwd("/Users/kristinlee/Documents/dmc/")
```{r setup, include=FALSE}
```{r setup, include=TRUE}
```{r setup, include=FALSE}
setwd("/Users/kristinlee/Documents/dmc/")
```{r setup, include=FALSE}
numPops = 6
positions = readRDS("selectedRegionPositions_example.RDS")
positions = readRDS("selectedRegionPositions_example.RDS")
getwd()
positions = readRDS("/Users/kristinlee/Documents/dmc/selectedRegionPositions_example.RDS")
freqs = readRDS("/Users/kristinlee/Documents/dmc/selectedRegionAlleleFreqs_example.RDS")
numBins = 1000
selSite = seq(min(positions), max(positions), length.out = 10)
sels = c(1e-4, 1e-3, 0.01, 0.05, 0.01, seq(0.05, 0.3, by = 0.05), seq(0.4, 0.6, by = 0.1))
times = c(0, 5, 25, 50, 100, 500, 1000, 1e4, 1e6)
gs = c(1/(2*Ne), 10^-(4:1))
numBins = 1000
selSite = seq(min(positions), max(positions), length.out = 10)
sels = c(1e-4, 1e-3, 0.01, 0.05, 0.01, seq(0.05, 0.3, by = 0.05), seq(0.4, 0.6, by = 0.1))
times = c(0, 5, 25, 50, 100, 500, 1000, 1e4, 1e6)
Ne = 10000 #only necessary to specify since we define lowest value of g by Ne
gs = c(1/(2*Ne), 10^-(4:1))
migs = c(10^-(seq(5, 1, by = -2)), 0.5, 1)
selPops = c(1, 3, 5) #only necessary to specify since we define possible source populations as all selected populations
sources = selPops
source("/Users/kristinlee/Documents/dmc/calcCompositeLike.R")
source("/Users/kristinlee/Documents/dmc/calcCompositeLike.R")
dim(freqs)
dim(Tmatrix)
source("/Users/kristinlee/Documents/dmc/calcCompositeLike.R")
# Neutral model
det_FOmegas_neutral = readRDS("det_FOmegas_neutral_example.RDS")
# Neutral model
det_FOmegas_neutral = readRDS("/Users/kristinlee/Documents/dmc/det_FOmegas_neutral_example.RDS")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/kristinlee/Documents/dmc/')
compLikelihood_mixed_svInd_all = lapply(1: length(selSite), function(i) {
readRDS(paste("example/compLikelihood_mixed_svInd_example_selSite", i, ".RDS", sep = ""))
})
saveRDS(compLikelihood_mixed_svInd_all, "example/compLikelihood_mixed_svInd_example.RDS")
1: length(selSite)
positions = readRDS("example/selectedRegionPositions_example.RDS")
selSite = seq(min(positions), max(positions), length.out = 10)
#read in composite likelihood files and calculate max for all proposed selected sites
compLikelihood_neutral = readRDS("example/compLikelihood_neutral_example.RDS")
compLikelihood_neutral_site = sapply(1 : length(selSite), function(i) max(unlist(compLikelihood_neutral[[i]])))
compLikelihood_ind = readRDS("example/compLikelihood_ind_example.RDS")
compLikelihood_ind_site = sapply(1 : length(selSite), function(i) max(unlist(compLikelihood_ind[[i]])))
compLikelihood_mig = readRDS("example/compLikelihood_mig_example.RDS")
compLikelihood_mig_site = sapply(1 : length(selSite), function(i) max(unlist(compLikelihood_mig[[i]])))
compLikelihood_sv = readRDS("example/compLikelihood_sv_example.RDS")
compLikelihood_sv_site = sapply(1 : length(selSite), function(i) max(unlist(compLikelihood_sv[[i]])))
compLikelihood_mixed_migInd = readRDS("example/compLikelihood_mixed_migInd_example.RDS")
compLikelihood_mixed_migInd_site = sapply(1 : length(selSite), function(i) max(unlist(compLikelihood_mixed_migInd[[i]])))
compLikelihood_mixed_svInd = readRDS("example/compLikelihood_mixed_svInd_example.RDS")
compLikelihood_mixed_svInd_site = sapply(1 : length(selSite), function(i) max(unlist(compLikelihood_mixed_svInd[[i]])))
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site)
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site)
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site)
plot_range = range(c((compLikelihood_ind_site - compLikelihood_neutral_site), (compLikelihood_mig_site - compLikelihood_neutral_site), (compLikelihood_sv_site - compLikelihood_neutral_site), (compLikelihood_mixed_migInd_site - compLikelihood_neutral_site), (compLikelihood_mixed_svInd_site - compLikelihood_neutral_site)))
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "l", ylim = c(plot_range[1], plot_range[2]))
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue")
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "l", ylim = c(plot_range[1], plot_range[2]))
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue")
lines(selSite, compLikelihood_mixed_migInd_site - compLikelihood_neutral_site, col = "orange")
lines(selSite, compLikelihood_mixed_svInd_site - compLikelihood_neutral_site, col = "green")
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "l", ylim = c(plot_range[1], plot_range[2]))
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue")
lines(selSite, compLikelihood_mixed_migInd_site - compLikelihood_neutral_site, col = "orange", lty = 2)
lines(selSite, compLikelihood_mixed_svInd_site - compLikelihood_neutral_site, col = "green", lty = 2)
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "b", ylim = c(plot_range[1], plot_range[2]))
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red", type = "b")
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "b", ylim = c(plot_range[1] - 100, plot_range[2] + 100))
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red", type = "b")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue", type = "b")
lines(selSite, compLikelihood_mixed_migInd_site - compLikelihood_neutral_site, col = "orange", lty = 2, type = "b")
lines(selSite, compLikelihood_mixed_svInd_site - compLikelihood_neutral_site, col = "green", lty = 2, type = "b")
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "b", ylim = c(plot_range[1] - 50, plot_range[2] + 50))
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red", type = "b")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue", type = "b")
lines(selSite, compLikelihood_mixed_migInd_site - compLikelihood_neutral_site, col = "orange", lty = 2, type = "b")
lines(selSite, compLikelihood_mixed_svInd_site - compLikelihood_neutral_site, col = "green", lty = 2, type = "b")
legend("topright", col = c("black", "red", "blue", "orange", "green"), lty = c(rep(1, 3), rep(2, 2)), sapply(1 : 5, function(i) paste("Model", i)))
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "b", ylim = c(plot_range[1] - 50, plot_range[2] + 50), xlab = "Proposed position selected site", ylab = "Composite log-likelihood (model - neutral)")
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red", type = "b")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue", type = "b")
lines(selSite, compLikelihood_mixed_migInd_site - compLikelihood_neutral_site, col = "orange", lty = 2, type = "b")
lines(selSite, compLikelihood_mixed_svInd_site - compLikelihood_neutral_site, col = "green", lty = 2, type = "b")
legend("topright", col = c("black", "red", "blue", "orange", "green"), lty = c(rep(1, 3), rep(2, 2)), sapply(1 : 5, function(i) paste("Model", i)))
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "b", ylim = c(plot_range[1] - 50, plot_range[2] + 50), xlab = "Proposed position selected site", ylab = "Composite log-likelihood (model - neutral)")
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red", type = "b")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue", type = "b")
lines(selSite, compLikelihood_mixed_migInd_site - compLikelihood_neutral_site, col = "orange", lty = 2, type = "b")
lines(selSite, compLikelihood_mixed_svInd_site - compLikelihood_neutral_site, col = "green", lty = 2, type = "b")
legend("topright", col = c("black", "red", "blue", "orange", "green"), lty = c(rep(1, 3), rep(2, 2)), sapply(1 : 5, function(i) paste("Model", i)), cex = 0.5)
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "b", ylim = c(plot_range[1] - 100, plot_range[2] + 100), xlab = "Proposed position selected site", ylab = "Composite log-likelihood (model - neutral)")
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red", type = "b")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue", type = "b")
lines(selSite, compLikelihood_mixed_migInd_site - compLikelihood_neutral_site, col = "orange", lty = 2, type = "b")
lines(selSite, compLikelihood_mixed_svInd_site - compLikelihood_neutral_site, col = "green", lty = 2, type = "b")
legend("topright", col = c("black", "red", "blue", "orange", "green"), lty = c(rep(1, 3), rep(2, 2)), sapply(1 : 5, function(i) paste("Model", i)), cex = 0.5)
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "b", ylim = c(plot_range[1] - 100, plot_range[2] + 100), xlab = "Proposed position selected site", ylab = "Composite log-likelihood (model - neutral)", cex.lab = 0.7)
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red", type = "b")
plot(selSite, compLikelihood_ind_site - compLikelihood_neutral_site, type = "b", ylim = c(plot_range[1] - 100, plot_range[2] + 100), xlab = "Proposed position selected site", ylab = "Composite log-likelihood (model - neutral)", cex.lab = 0.7)
lines(selSite, compLikelihood_mig_site - compLikelihood_neutral_site, col = "red", type = "b")
lines(selSite, compLikelihood_sv_site - compLikelihood_neutral_site, col = "blue", type = "b")
lines(selSite, compLikelihood_mixed_migInd_site - compLikelihood_neutral_site, col = "orange", lty = 2, type = "b")
lines(selSite, compLikelihood_mixed_svInd_site - compLikelihood_neutral_site, col = "green", lty = 2, type = "b")
legend("topright", col = c("black", "red", "blue", "orange", "green"), lty = c(rep(1, 3), rep(2, 2)), sapply(1 : 5, function(i) paste("Model", i)), cex = 0.5)
getMLEind = function(compLike, selSite, sels) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / length(sels))
maxSelIndex = which.max(unlist(compLike[[maxLocIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
return(c(maxLoc, maxSel))
}
getMLEind(compLikelihood_ind, sels)
getMLEind(compLikelihood_ind, selSite, sels)
getMLEsv(compLikelihood_sv, selSite, sels, gs, times)
getMLEind = function(compLike, selSite, sels) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / length(sels))
maxSelIndex = which.max(unlist(compLike[[maxLocIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
return(c(maxLoc, maxSel))
}
getMLEmig = function(compLike, selSite, sels, migs, sources) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / (length(sels) * length(migs) * length(sources)))
maxSelIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]])) / (length(migs) * length(sources)))
maxMigIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]])) / length(sources))
maxSourceIndex = which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxMigIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
maxMig = migs[maxMigIndex]
maxSource = sources[maxSourceIndex]
return(c(maxLoc, maxSel, maxMig, maxSource))
}
getMLEsv_source = function(compLike, selSite, sels, gs, times, sources) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / (length(sels) * length(gs) * length(times) * length(sources)))
maxSelIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]])) / (length(gs) * length(times) * length(sources)))
maxGIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]])) / (length(times) * length(sources)))
maxTimeIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]])) / length(sources))
maxSourceIndex = which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxMigIndex]][[maxTimeIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
maxG = gs[maxGIndex]
maxTime = times[maxTimeIndex]
maxSource = sels[maxSourceIndex]
return(c(maxLoc, maxSel, maxG, maxTime, maxSource))
}
getMLEsv_mixed = function(compLike, selSite, sels, gs, times, migs, sources) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / (length(sels) * length(gs) * length(times) * length(migs) * length(sources)))
maxSelIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]])) / (length(gs) * length(times) * length(migs) * length(sources)))
maxGIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]])) / (length(times) * length(migs) * length(sources)))
maxTimeIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]])) / (length(migs) * length(sources)))
maxMigIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]][[maxTimeIndex]])) / length(sources))
maxSourceIndex = which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxMigIndex]][[maxTimeIndex]][[maxMigIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
maxG = gs[maxGIndex]
maxTime = times[maxTimeIndex]
maxMig = migs[maxMigIndex]
maxSource = sels[maxSourceIndex]
return(c(maxLoc, maxSel, maxG, maxTime, maxSource))
}
getMLEsv(compLikelihood_sv, selSite, sels, gs, times)
getMLEsv_source(compLikelihood_sv, selSite, sels, gs, times, sources)
getMLEsv_source = function(compLike, selSite, sels, gs, times, sources) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / (length(sels) * length(gs) * length(times) * length(sources)))
maxSelIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]])) / (length(gs) * length(times) * length(sources)))
maxGIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]])) / (length(times) * length(sources)))
maxTimeIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]])) / length(sources))
maxSourceIndex = which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]][[maxTimeIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
maxG = gs[maxGIndex]
maxTime = times[maxTimeIndex]
maxSource = sels[maxSourceIndex]
return(c(maxLoc, maxSel, maxG, maxTime, maxSource))
}
getMLEsv_source(compLikelihood_sv, selSite, sels, gs, times, sources)
max(times)
min(gs)
1.0e-02
getMLEind = function(compLike, selSite, sels) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / length(sels))
maxSelIndex = which.max(unlist(compLike[[maxLocIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
return(c(maxLoc, maxSel))
}
getMLEmig = function(compLike, selSite, sels, migs, sources) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / (length(sels) * length(migs) * length(sources)))
maxSelIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]])) / (length(migs) * length(sources)))
maxMigIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]])) / length(sources))
maxSourceIndex = which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxMigIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
maxMig = migs[maxMigIndex]
maxSource = sources[maxSourceIndex]
return(c(maxLoc, maxSel, maxMig, maxSource))
}
getMLEsv_source = function(compLike, selSite, sels, gs, times, sources) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / (length(sels) * length(gs) * length(times) * length(sources)))
maxSelIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]])) / (length(gs) * length(times) * length(sources)))
maxGIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]])) / (length(times) * length(sources)))
maxTimeIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]])) / length(sources))
maxSourceIndex = which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]][[maxTimeIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
maxG = gs[maxGIndex]
maxTime = times[maxTimeIndex]
maxSource = sources[maxSourceIndex]
return(c(maxLoc, maxSel, maxG, maxTime, maxSource))
}
getMLEsv_mixed = function(compLike, selSite, sels, gs, times, migs, sources) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / (length(sels) * length(gs) * length(times) * length(migs) * length(sources)))
maxSelIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]])) / (length(gs) * length(times) * length(migs) * length(sources)))
maxGIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]])) / (length(times) * length(migs) * length(sources)))
maxTimeIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]])) / (length(migs) * length(sources)))
maxMigIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]][[maxTimeIndex]])) / length(sources))
maxSourceIndex = which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxMigIndex]][[maxTimeIndex]][[maxMigIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
maxG = gs[maxGIndex]
maxTime = times[maxTimeIndex]
maxMig = migs[maxMigIndex]
maxSource = sources[maxSourceIndex]
return(c(maxLoc, maxSel, maxG, maxTime, maxSource))
}
getMLEmig(compLikelihood_sv, selSite, sels, migs = , sources)
getMLEmig(compLikelihood_sv, selSite, sels, migs, sources)
getMLEmig(compLikelihood_mig, selSite, sels, migs, sources)
getMLEmixed = function(compLike, selSite, sels, gs, times, migs, sources) {
maxLocIndex = ceiling(which.max(unlist(compLike)) / (length(sels) * length(gs) * length(times) * length(migs) * length(sources)))
maxSelIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]])) / (length(gs) * length(times) * length(migs) * length(sources)))
maxGIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]])) / (length(times) * length(migs) * length(sources)))
maxTimeIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]])) / (length(migs) * length(sources)))
maxMigIndex = ceiling(which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxGIndex]][[maxTimeIndex]])) / length(sources))
maxSourceIndex = which.max(unlist(compLike[[maxLocIndex]][[maxSelIndex]][[maxMigIndex]][[maxTimeIndex]][[maxMigIndex]]))
maxLoc = selSite[maxLocIndex]
maxSel = sels[maxSelIndex]
maxG = gs[maxGIndex]
maxTime = times[maxTimeIndex]
maxMig = migs[maxMigIndex]
maxSource = sources[maxSourceIndex]
return(c(maxLoc, maxSel, maxG, maxTime, maxSource))
}
getMLEmixed(compLikelihood_sv, selSite, sels, gs, times, migs, sources)
getMLEmixed(compLikelihood_mixed_svInd, selSite, sels, gs, times, migs, sources)
getMLEmixed(compLikelihood_mixed_svInd, selSite, sels, gs, times, migs[1], sources)
getMLEmixed(compLikelihood_mixed_migInd, selSite, sels, gs, times, migs[1], sources)
getMLEmixed(compLikelihood_mixed_migInd, selSite, sels, gs, times, migs, sources)
getMLEmixed(compLikelihood_mixed_migInd, selSite, sels, gs[1], times[1], migs, sources)
getMLEmixed(compLikelihood_mixed_migInd, selSite, sels, gs, times, migs[1], sources)
0.00005
getMLEsv_source(compLikelihood_sv, selSite, sels, gs, times, sources)
5.0e-02
length(compLikelihood_mixed_svInd)
length(compLikelihood_mixed_svInd[[1]])
length(compLikelihood_mixed_svInd[[1]][[1]])
length(compLikelihood_mixed_svInd[[1]][[1]][[1]])
length(compLikelihood_mixed_svInd[[1]][[1]][[1]][[1]])
length(compLikelihood_mixed_svInd[[1]][[1]][[1]][[1]][[1]])
compLike_sv_byTime = lapply(1 : length(times), function(time) {
sapply(1: length(sels), function(sel) {
sapply(1 : length(gs), function(g) {
compLikelihood_sv[[2]][[sel]][[g]][[time]]
})
})
})
profileLike_time_sv = sapply(1: length(compLike_sv_byTime), function(i) {
max(unlist(compLike_sv_byTime[[i]]))
})
profileLike_time_sv
plot(times, profileLike_time_sv, type = "b", "Time", "Profile composite log-likelihood")
plot(times, profileLike_time_sv, type = "b", xlab = "Time", ylab = "Profile composite log-likelihood")
selSite
sels
c(1e-4, 1e-3, 0.01, 0.05, 0.01, seq(0.05, 0.3, by = 0.05), seq(0.4, 0.6, by = 0.1))
length(sels)
c(1e-4, 1e-3, 0.01, seq(0.02, 0.14, by = 0.01), seq(0.15, 0.3, by = 0.05), seq(0.4, 0.6, by = 0.1))
freqs = readRDS("example/selectedRegionAlleleFreqs_example.RDS")
randFreqs = apply(allFreqs, 2, function(my.freqs) {
if(runif(1) < 0.5) {
my.freqs = 1 - my.freqs
}
my.freqs
})
randFreqs = apply(freqs, 2, function(my.freqs) {
if(runif(1) < 0.5) {
my.freqs = 1 - my.freqs
}
my.freqs
})
dim(freqs)
freqs[ ,1:4]
randFreqs[, 1:4]
saveRDS(randFreqs, "example/selectedRegionAlleleFreqsRand_example.RDS")
0.00435 * 4 * 10000
200/(4*Ne)
2 * log(4 * Ne * 0.03) / 0.03
2 * log(4 * Ne * 0.1) / 0.1
ts = c(0.003775, 0.003525, 0.00435) * 4 * Ne
ts
2 * log(4 * Ne * 0.1) / 0.1
head(positions)
dim(freqs)
freqs[, 1:4]
allFreqs = readRDS("example/neutralAlleleFreqs_example.RDS")
dim(allFreqs)
